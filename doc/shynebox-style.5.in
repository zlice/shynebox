'\" t
.\"     Title: shynebox-style
.\"    Author: zlice https://github.com/zlice/shynebox
.\" Generator: DocBook XSL Stylesheets vsnapshot <http://docbook.sf.net/>
.\"      Date: 11 October 2023
.\"    Manual: Shynebox Manual
.\"    Source: shynebox-style.txt
.\"  Language: English
.\"
.TH "SHYNEBOX\-STYLE" "5" "11 October 2023" "shynebox\-style\&.txt" "Shynebox Manual"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
shynebox-style \- A comprehensive look at styles/themes for shynebox\&.
.SH "SYNOPSIS"
.sp
This document describes various options available for shynebox styles\&.
.SH "DESCRIPTION"
.sp
What is a Style?
.sp
Styles, sometimes referred to as Themes, are a graphical configuration for the shynebox window manager\&.
.sp
Styles are defined in simple ASCII text files that tell shynebox how to generate the appearance of different components of the window manager\&. The default installation of shynebox is shipped with many classic examples that show a great deal of what styles can do\&. To use one of the standard styles navigate to the \fISystem Styles\fR menu under your main shynebox menu\&.
.sp
Shynebox uses its own graphics class to render its images on the fly\&. By using styles you can determine, at a great level of configurability, what your desktop will look like\&. Shynebox is mostly, if not completely, compatible with fluxbox styles/themes\&.
.SH "STRUCTURE"
.sp
A style is made up of a few major components which then have their own sub\-directives\&. The major components are as follows:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fIwindow\&.*\fR
directives control the appearance of the window frames
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fIwindow\&.tab\&.*\fR
controls the appearance of the window tabs
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fImenu\&.*\fR
controls the appearance of popup menus
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fItoolbar\&.*\fR
is the bar you will see at the edge of your screen
.RE
.SH "LOCATION"
.sp
There are many places to store your styles, the most common is in your \fI~/\&.shynebox/styles\fR directory\&. First time runs will point to default styles in \fI@pkgdatadir@/styles\fR for providing a basic usable configuration\&.
.sp
When creating your own style, create a directory (normally the name of your style, e\&.g\&. \fI~/\&.shynebox/styles/newtheme\fR)\&. While there isn\(cqt an official structure, it is common to create a directory named after your style and place your pixmaps directory (if required) in there along with a file called theme\&.cfg (may also be named style\&.cfg)\&. This file is where you will construct your style using the components covered later in this manual page\&. An example of steps taken when beginning a style project of your own may look like:
.sp
.if n \{\
.RS 4
.\}
.nf
$ cd
$ mkdir \-p ~/\&.shynebox/styles/YourStyle/pixmaps
$ cd ~/\&.shynebox/styles/YourStyle
$ nano theme\&.cfg
.fi
.if n \{\
.RE
.\}
.sp
Output of a packaged style should look like the following:
.sp
.if n \{\
.RS 4
.\}
.nf
$ cd
$ tar \-tjvf YourStyle\&.tar\&.bz2
 \&.shynebox/styles/YourStyle/theme\&.cfg
 \&.shynebox/styles/YourStyle/pixmaps
 \&.shynebox/styles/YourStyle/pixmaps/stick\&.xpm
 \&.\&.\&.
.fi
.if n \{\
.RE
.\}
.sp
Of course, all of these are just preferences, shynebox allows for the customization of many things, including how you handle your styles\&.
.SH "CREATING YOUR STYLE"
.sp
As discussed above, shynebox allows you to configure its four main components: the toolbar, menus, and window decorations\&. Here are some quick examples to illustrate basic syntax\&.
.sp
This sets the color resource of the toolbar clock to \fIgreen\fR\&.
.sp
.if n \{\
.RS 4
.\}
.nf
toolbar\&.clock\&.color: green
.fi
.if n \{\
.RE
.\}
.sp
Another example:
.sp
.if n \{\
.RS 4
.\}
.nf
menu\&.title\&.color:     rgb:3/4/5
.fi
.if n \{\
.RE
.\}
.sp
This sets the color resource of the menu and all of its \fIchildren\fR to \(oqrgb:3/4/5\(cq\&. (For a description of color names, see \fBX(1)\fR)
.sp
And with:
.sp
.if n \{\
.RS 4
.\}
.nf
*font:  \-b&h\-lucida\-medium\-r\-normal\-*\-*\-140\-*
.fi
.if n \{\
.RE
.\}
.sp
you set the font resource for all style items to this font name\&. (For information about the fonts installed on your system, you can use a program like xfontsel(1), gtkfontsel, or xlsfonts(1)\&.)
.sp
In the last example you will notice the wildcard (*) before font\&. In a Shynebox style you can set values with a wildcard\&. You can do this with any component/value\&. For example if you wanted all of the text to be the color green you could do:
.sp
.if n \{\
.RS 4
.\}
.nf
*textColor:  #00FF00
.fi
.if n \{\
.RE
.\}
.sp
This means that you can setup a very simple style with very few properties\&. See the \fBEXAMPLES\fR below\&.
.sp
Shynebox also allows you to override wildcards in your style\&. Lets take our example above and add an override for the toolbar\&.clock\&.textColor component:
.sp
.if n \{\
.RS 4
.\}
.nf
*textColor: #00FF00
toolbar\&.clock\&.textColor: #000000
.fi
.if n \{\
.RE
.\}
.sp
With that, all text colors will be \fI#00FF00\fR except the toolbar clock text which will be \fI#000000\fR\&.
.sp
Now what makes shynebox so spectacular is its ability to render textures on the fly\&. A texture is a fill\-pattern that you see on some styles\&. Texture descriptions are specified directly to the key that they should apply to, e\&.g\&.:
.sp
.if n \{\
.RS 4
.\}
.nf
toolbar\&.clock:  Raised Gradient Diagonal Bevel1
toolbar\&.clock\&.color:    #545454
toolbar\&.clock\&.colorTo:  #c0c0c0
.fi
.if n \{\
.RE
.\}
.sp
A texture description consists of up to five fields, which are as follows:
.PP
\fBFlat | Raised | Sunken\fR
.RS 4
Gives the component either a flat, raised or sunken appearance\&.
.RE
.PP
\fBGradient | Solid\fR
.RS 4
Tells shynebox to draw either a solid color or a gradient texture\&.
.RE
.PP
\fBHorizontal | Vertical | Diagonal | Crossdiagonal | Pipecross | Elliptic | Rectangle | Pyramid\fR
.RS 4
Defines what
\fBGradient\fR
pattern to use\&.
.RE
.PP
\fBInterlaced\fR
.RS 4
Tells shynebox to interlace the texture (darken every other line)\&. This option is most commonly used with gradiented textures, but it also works in solid textures\&.
.RE
.PP
\fBBevel1 | Bevel2\fR
.RS 4
Tells shynebox which type of bevel to use\&. Bevel1 is the default bevel\&. The shading is placed on the edge of the image\&. Bevel2 is an alternative\&. The shading is placed one pixel in from the edge of the image\&.
.RE
.PP
\fBParentRelative\fR
.RS 4
Replace a texture description and makes the component appear as a part of its parent, e\&.g\&. totally transparent\&.
.RE
.sp
Or for even more possibilities Pixmap\&. If a pixmap texture is specified (it might not be necessary on every occasion) the pixmap file is specified in a separate pixmap resource\&.
.sp
.if n \{\
.RS 4
.\}
.nf
toolbar\&.clock: pixmap
toolbar\&.clock\&.pixmap: clock_background\&.xpm
.fi
.if n \{\
.RE
.\}
.sp
(Note: This feature might need some investigation, reports say that sometimes the resources color and colorTo must be set and then they may not be set\&.)
.sp
All gradiented textures are composed of two color values: the \fIcolor\fR and \fIcolorTo\fR resources\&. When \fBInterlaced\fR is used in \fBSolid\fR mode, the \fIcolorTo\fR resource is used to find the interlacing color\&.
.SH "FONT EFFECTS"
.sp
In addition to specifying the font\-family and the font\-weight via the supported font\-rendering\-engine (eg, Xft), shynebox supports effects: \fIhalo\fR and \fIshadow\fR\&. To set the shadow effect:
.sp
.if n \{\
.RS 4
.\}
.nf
menu\&.title\&.font: sans\-8:bold
menu\&.title\&.effect: shadow
menu\&.title\&.shadow\&.color: green
menu\&.title\&.shadow\&.x: 3
menu\&.title\&.shadow\&.y: 3
.fi
.if n \{\
.RE
.\}
.sp
To set the halo effect:
.sp
.if n \{\
.RS 4
.\}
.nf
menu\&.title\&.font: sans\-8:bold
menu\&.title\&.effect: halo
menu\&.title\&.halo\&.color: green
.fi
.if n \{\
.RE
.\}
.SH "FULL COMPONENT LIST"
.sp
Here is the exhaustive component list for shynebox styles\&. Each one is listed with their type of value required\&. Comments in a style file are preceded with an exclamation point (!) or a pound (#) which we also use here so that these can be pasted into a new theme\&.cfg to be customized appropriately\&. Please note that in order to keep styles consistent it is often the practice of stylists to provide all of the theme\-items in their style file even if they are not used\&. This allows the user the ease of changing different components\&.
.SH "WINDOW OPTIONS"
.sp
Many, many things you can do with window design in shynebox, below are your options\&. Have fun\&.
.sp
.if n \{\
.RS 4
.\}
.nf
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
window\&.bevelWidth:              <integer>
window\&.borderColor:             <color>
window\&.borderWidth:             <integer>
window\&.button\&.focus:            <texture type>
window\&.button\&.focus\&.color:      <color>
window\&.button\&.focus\&.colorTo:    <color>
window\&.button\&.focus\&.picColor:   <color>
window\&.button\&.focus\&.pixmap:     <filename>
window\&.button\&.pressed: <texture type>
window\&.button\&.pressed\&.color:    <color>
window\&.button\&.pressed\&.colorTo:  <color>
window\&.button\&.pressed\&.pixmap:   <filename>
window\&.button\&.unfocus:          <texture type>
window\&.button\&.unfocus\&.color:    <color>
window\&.button\&.unfocus\&.colorTo:  <color>
window\&.button\&.unfocus\&.picColor: <color>
window\&.button\&.unfocus\&.pixmap:   <filename>
window\&.close\&.pixmap:            <filename>
window\&.close\&.pressed\&.pixmap:    <filename>
window\&.close\&.unfocus\&.pixmap:    <filename>
window\&.frame\&.focusColor:        <color>
window\&.frame\&.unfocusColor:      <color>
window\&.grip\&.focus:              <texture type>
window\&.grip\&.focus\&.color:        <color>
window\&.grip\&.focus\&.colorTo:      <color>
window\&.grip\&.focus\&.pixmap:       <filename>
window\&.grip\&.unfocus:            <texture type>
window\&.grip\&.unfocus\&.color:      <color>
window\&.grip\&.unfocus\&.colorTo:    <color>
window\&.grip\&.unfocus\&.pixmap:     <filename>
window\&.handle\&.focus:            <texture type>
window\&.handle\&.focus\&.color:      <color>
window\&.handle\&.focus\&.colorTo:    <color>
window\&.handle\&.focus\&.pixmap:     <filename>
window\&.handle\&.unfocus:          <texture type>
window\&.handle\&.unfocus\&.color:    <color>
window\&.handle\&.unfocus\&.colorTo:  <color>
window\&.handle\&.unfocus\&.pixmap:   <filename>
window\&.handleWidth:             <integer>
window\&.iconify\&.pixmap:          <filename>
window\&.iconify\&.pressed\&.pixmap:  <filename>
window\&.iconify\&.unfocus\&.pixmap:  <filename>
window\&.justify:                 <{Left|Right|Center}>
window\&.label\&.active:            <texture type>
window\&.label\&.active\&.textColor:  <color>
window\&.label\&.focus:             <texture type>
window\&.label\&.focus\&.color:       <color>
window\&.label\&.focus\&.colorTo:     <color>
window\&.label\&.focus\&.font:        <font>
window\&.label\&.focus\&.pixmap:      <filename>
window\&.label\&.unfocus:           <texture type>
window\&.label\&.unfocus\&.color:     <color>
window\&.label\&.unfocus\&.colorTo:   <color>
window\&.label\&.unfocus\&.font:      <font>
window\&.label\&.unfocus\&.pixmap:    <filename>
window\&.label\&.focus\&.textColor:   <color>
window\&.label\&.unfocus\&.textColor: <color>
window\&.maximize\&.pixmap:         <filename>
window\&.maximize\&.pressed\&.pixmap: <filename>
window\&.maximize\&.unfocus\&.pixmap: <filename>
window\&.roundCorners:            <{Top|Bottom}{Left|Right}>
window\&.shade\&.pixmap:            <filename>
window\&.shade\&.pressed\&.pixmap:    <filename>
window\&.shade\&.unfocus\&.pixmap:    <filename>
window\&.stick\&.pixmap:            <filename>
window\&.stick\&.pressed\&.pixmap:    <filename>
window\&.stick\&.unfocus\&.pixmap:    <filename>
window\&.stuck\&.pixmap:            <filename>
window\&.stuck\&.unfocus\&.pixmap:    <filename>
window\&.lhalf\&.pixmap:            <filename>
window\&.lhalf\&.unfocus\&.pixmap:    <filename>
window\&.rhalf\&.pixmap:            <filename>
window\&.rhalf\&.unfocus\&.pixmap:    <filename>
window\&.title\&.focus:             <texture type>
window\&.title\&.focus\&.color:       <color>
window\&.title\&.focus\&.colorTo:     <color>
window\&.title\&.focus\&.pixmap:      <filename>
window\&.title\&.height:            <integer>
window\&.title\&.unfocus:           <texture type>
window\&.title\&.unfocus\&.color:     <color>
window\&.title\&.unfocus\&.colorTo:   <color>
window\&.title\&.unfocus\&.pixmap:    <filename>
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
.fi
.if n \{\
.RE
.\}
.SH "MENU OPTIONS"
.sp
Everything you need to make your menu look pretty\&.
.sp
.if n \{\
.RS 4
.\}
.nf
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
menu\&.bevelWidth:                <integer>
menu\&.borderColor:               <color>
menu\&.borderWidth:               <integer>
menu\&.bullet:                    <{empty|square|triangle|diamond}>
menu\&.bullet\&.position:           <{left|right}>
menu\&.frame:                     <texture type>
menu\&.frame\&.color:               <color>
menu\&.frame\&.colorTo:             <color>
menu\&.frame\&.disableColor:        <color>
menu\&.frame\&.font:                <font>
menu\&.frame\&.justify:             <{Left|Right|Center}>
menu\&.frame\&.pixmap:              <filename>
menu\&.frame\&.textColor:           <color>
menu\&.hilite:                    <texture type>
menu\&.hilite\&.color:              <color>
menu\&.hilite\&.colorTo:            <color>
menu\&.hilite\&.font:               <font>
menu\&.hilite\&.justify:            <{left|center|right}>
menu\&.hilite\&.pixmap:             <filename>
menu\&.hilite\&.textColor:          <color>
menu\&.itemHeight:                <integer>
menu\&.title:                     <texture type>
menu\&.title\&.color:               <color>
menu\&.title\&.colorTo:             <color>
menu\&.title\&.font:                <font>
menu\&.title\&.pixmap:              <filename>
menu\&.title\&.textColor:           <color>
menu\&.title\&.justify:             <{Left|Right|Center}>
menu\&.titleHeight:               <integer>
menu\&.roundCorners:              <{Top|Bottom}{Left|Right}>
menu\&.selected\&.pixmap:           <filename>
menu\&.submenu\&.pixmap:            <filename>
menu\&.unselected\&.pixmap:         <filename>
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
.fi
.if n \{\
.RE
.\}
.SH "BACKGROUND"
.sp
Every style must specify the background option\&. If you don\(cqt want your style to change the user\(cqs background, then use \(oqbackground: none\(cq\&. The options \(oqcentered\(cq, \(oqaspect\(cq, \(oqtiled\(cq, and \(oqfullscreen\(cq require the \(oqbackground\&.pixmap\(cq resource to contain a valid file name\&. The \(oqrandom\(cq option requires \(oqbackground\&.pixmap\(cq to contain a valid directory name\&. For these options, shynebox will call \fBsbsetbg(1)\fR to set the background\&. The options \(oqgradient\(cq, \(oqsolid\(cq, and \(oqmod\(cq all require \(oqbackground\&.color\(cq to be set\&. \(oqgradient\(cq and \(oqmod\(cq both require \(oqbackground\&.colorTo\(cq\&. \(oqmod\(cq requires \(oqbackground\&.modX\(cq and \(oqbackground\&.modY\(cq to be set as well\&. These options will be passed to \fBsbsetroot(1)\fR to set the background\&. The special option \(oqunset\(cq is for use in user overlay files only\&. It specifies that sbsetbg should never be run (by default, even when \(oqnone\(cq is set in the overlay, shynebox will try to run \(lqsbsetbg \-z\(rq to restore the last wallpaper)\&.
.sp
.if n \{\
.RS 4
.\}
.nf
background: centered|aspect|tiled|fullscreen|random|solid|gradient <texture>|mod|none|unset
background\&.pixmap: <file or directory>
background\&.color: <color>
background\&.colorTo: <color>
background\&.modX: <integer>
background\&.modY: <integer>
.fi
.if n \{\
.RE
.\}
.SH "TOOLBAR OPTIONS"
.sp
Below you will find all of the configuration possibilities for the toolbar\&. The list is pretty extensive and offers you many options to make your toolbar look just the way you want it\&.
.sp
.if n \{\
.RS 4
.\}
.nf
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
toolbar: <texture type>
toolbar\&.bevelWidth:             <integer (0\-255)>
toolbar\&.borderColor:            <color>
toolbar\&.borderWidth:            <integer>
toolbar\&.button\&.scale:           <integer>
toolbar\&.color:                  <color>
toolbar\&.colorTo:                <color>
toolbar\&.clock:                  <texture type>
toolbar\&.clock\&.borderColor:      <color>
toolbar\&.clock\&.borderWidth:      <integer>
toolbar\&.clock\&.font:             <font>
toolbar\&.clock\&.justify:          <{Left|Right|Center}>
toolbar\&.clock\&.pixmap:           <filename>
toolbar\&.clock\&.color:            <color>
toolbar\&.clock\&.colorTo:          <color>
toolbar\&.clock\&.textColor:        <color>
toolbar\&.height:                 <integer>
toolbar\&.iconbar\&.focused:        <texture type>
toolbar\&.iconbar\&.focused\&.color:  <color>
toolbar\&.iconbar\&.focused\&.colorTo:<color>
toolbar\&.iconbar\&.focused\&.pixmap: <filename>
toolbar\&.iconbar\&.unfocused:      <texture type>
toolbar\&.iconbar\&.unfocused\&.color:  <color>
toolbar\&.iconbar\&.unfocused\&.colorTo: <color>
toolbar\&.iconbar\&.unfocused\&.pixmap: <filename>
toolbar\&.iconbar\&.empty:          <texture type>
toolbar\&.iconbar\&.empty\&.color:    <color>
toolbar\&.iconbar\&.empty\&.colorTo:  <color>
toolbar\&.iconbar\&.empty\&.pixmap:   <filename>
toolbar\&.iconbar\&.focused\&.borderColor: <color>
toolbar\&.iconbar\&.focused\&.borderWidth:    <integer>
toolbar\&.iconbar\&.unfocused\&.borderColor: <color>
toolbar\&.iconbar\&.unfocused\&.borderWidth:  <integer>
toolbar\&.iconbar\&.borderColor:    <color>
toolbar\&.iconbar\&.borderWidth:    <integer>
toolbar\&.iconbar\&.focused\&.font:   <font>
toolbar\&.iconbar\&.focused\&.justify:        <{Left|Right|Center}>
toolbar\&.iconbar\&.focused\&.textColor: <color>
toolbar\&.iconbar\&.unfocused\&.font: <font>
toolbar\&.iconbar\&.unfocused\&.justify:      <{Left|Right|Center}>
toolbar\&.iconbar\&.unfocused\&.textColor: <color>
toolbar\&.pixmap:                 <filename>
toolbar\&.shaped:                 <boolean>
toolbar\&.workspace\&.font:         <font>
toolbar\&.workspace\&.justify:      <{Left|Right|Center}>
toolbar\&.workspace\&.textColor:    <color>
toolbar\&.workspace:              <texture type>
toolbar\&.workspace\&.borderColor:  <color>
toolbar\&.workspace\&.borderWidth:  <integer>
toolbar\&.workspace\&.color:        <color>
toolbar\&.workspace\&.colorTo:      <color>
toolbar\&.workspace\&.pixmap:       <filename>
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
.fi
.if n \{\
.RE
.\}
.SH "EXAMPLES"
.sp
This list may seem intimidating, but remember, when you create your own style you can easily set a majority of these keys with a single component\&. For an example of this:
.sp
.if n \{\
.RS 4
.\}
.nf
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
*color: slategrey
*colorTo:       darkslategrey
*unfocus\&.color: darkslategrey
*unfocus\&.colorTo:       black
*textColor:     white
*unfocus\&.textColor:     lightgrey
*font:  lucidasans\-10
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
.fi
.if n \{\
.RE
.\}
.sp
This sets nice defaults for many components\&.
.SH "COLOR FORMATS"
.sp
These are the color formats for styles:
.sp
.if n \{\
.RS 4
.\}
.nf
#000000 (Hexadecimal)
rgb:<0\-255>/<0\-255>/<0\-255>
.fi
.if n \{\
.RE
.\}
.sp
See /usr/share/X11/rgb\&.txt for an explanation\&.
.SH "AUTHORS"
.sp
Blackbox was written and maintained by Brad Hughes <blackbox at alug\&.org> and Jeff Raven <jraven at psu\&.edu>\&.
.sp
fluxbox(1) is written and maintained by Henrik Kinnunen <fluxgen at fluxbox\&.org> with contributions and patches merged from many individuals around the world\&.
.sp
This manpage was composed from various resources including the official documentation, fluxbox(1) man page and numerous other resources by Curt "Asenchi" Micol\&. If you notice any errors or problems with this page, please contact him here: <asenchi at asenchi\&.com> and using the great contributions of <grubert at users\&.sourceforge\&.net>\&. Numerous other languages could be available if someone jumps in\&.
.sp
Updated for shynebox by zlice
.SH "SEE ALSO"
.sp
shynebox(1) sbsetbg(1) sbsetroot(1)
.SH "AUTHOR"
.PP
\fBzlice https://github\&.com/zlice/shynebox\fR
.RS 4
Author.
.RE
