'\" t
.\"     Title: shynebox-keys
.\"    Author: zlice https://github.com/zlice/shynebox
.\" Generator: DocBook XSL Stylesheets vsnapshot <http://docbook.sf.net/>
.\"      Date: 11 October 2023
.\"    Manual: Shynebox Manual
.\"    Source: shynebox-keys.txt
.\"  Language: English
.\"
.TH "SHYNEBOX\-KEYS" "5" "11 October 2023" "shynebox\-keys\&.txt" "Shynebox Manual"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
shynebox-keys \- keyboard shortcuts configuration for shynebox(1)
.SH "SYNOPSIS"
.sp
~/\&.shynebox/keys
.SH "SYNTAX"
.sp
Variable parameters are shown in emphasis: \fIargument\fR
.sp
Optional parameters are shown in square brackets: [\fIargument\fR]
.sp
All other characters shown are required verbatim\&. Whitespace is required where shown, but it is fine to add more whitespace\&.
.SH "DESCRIPTION"
.sp
You can customize \fBshynebox(1)\fR hotkeys through the file pointed to by \fBkeyFile\fR in your config (normally ~/\&.shynebox/keys)\&. The file consists of lines of the basic format:
.sp
\fB[\fR\fB\fImodifiers\fR\fR\fB] \fR\fB\fIkey\fR\fR\fB :command [\fR\fB\fIarguments \&...\fR\fR\fB]\fR
.sp
The space between the \fIkey\fR and the \fB:\fR before the \fIcommand\fR is mandatory\&.
.sp
All modifiers and commands are case\-insensitive\&. Some command arguments (especially those that will be passed to the shell) are case\-sensitive\&. Some key names are case\-sensitive\&.
.sp
Lines beginning with a \fI#\fR or \fI!\fR are considered comments and skipped\&.
.sp
You will need to \(lqreload config\(rq shynebox after editing the keys file so it picks up your change\&.
.SH "MODIFIERS"
.sp
You can get a list of possible modifiers by calling \(oqxmodmap \-pm\(cq\&. This also shows you to which keys the modifiers are mapped, but the following modifiers are most commonly used:
.sp
\fBShift Control Mod1 Mod4 \- Alt(Mod1) Ctrl(Control) Win(Mod4) Super(Mod4)\fR
.PP
There are also some special modifiers that refer to cursor location for mouse button events
.RS 4
.PP
\fBOnDesktop\fR
.RS 4
Cursor is over the desktop (root window), and not any window\&.
.RE
.PP
\fBOnWindow\fR
.RS 4
Cursor is over a window\&.
.RE
.PP
\fBOnTitlebar\fR
.RS 4
Cursor is over a window\(cqs titlebar\&.
.RE
.PP
\fBOnTab\fR
.RS 4
Cursor is over a tab\&.
.RE
.PP
\fBDouble\fR
.RS 4
Limits this action to double\-clicks only\&.
.RE
.RE
.sp
To combine two or more modifiers, list them in any order like so:
.sp
.if n \{\
.RS 4
.\}
.nf
Super OnWindow Mouse5 :command
.fi
.if n \{\
.RE
.\}
.SH "KEYS"
.sp
You may specify a key by its key name (for example, "a" or "space") or by its numeric keycode (for example, \fB38\fR or \fB0xf3\fR)\&.
.sp
If you don\(cqt know the name of a key, you can run \fBxev(1)\fR in a terminal, push the key, and see the name in the output (to filter only keyboard events use "\fBxev \-event_mask keyboard\fR")\&. Some "special" keys do not produce a key name in the output of \fBxev(1)\fR, and will need to use the keycode (NOT the keysym!) in your keys file\&.
.sp
To bind commands to mouse events (\fIN\fR denotes the number of the button, eg\&. \fI1\fR is the left button, \fI4\fR/\fI5\fR are the wheel buttons):
.PP
\fBMouseN\fR
.RS 4
The mouse button
\fIN\fR
is pressed down and held\&.
.RE
.PP
\fBClickN\fR
.RS 4
The mouse button
\fIN\fR
is clicked (pressed and released with no movement in between)
.RE
.sp
There are some special "keys" that let you bind events to non\-key/button events:
.PP
\fBChangeWorkspace\fR
.RS 4
Fires when the workspace changes\&. This can be used to change backgrounds or do anything else you like when you switch to a new workspace\&. See the
\fBEXAMPLES\fR
below for one idea\&.
.sp
WARNING! Use caution with this event! For example, do NOT bind this to any action that changes your current workspace\&. If you break your shynebox with this feature, you get to keep the pieces\&.
.RE
.SH "CHAINING"
.sp
Key bindings can be chained in a fashion similar to Emacs key bindings using the syntax:
.sp
\fImodifiers\-1\fR \fIkey\-1\fR \fImodifiers\-2\fR \fIkey\-2\fR :command [\fIarguments \&...\fR]*
.sp
To abort a chained command part\-way through typing it, press the <ESC> key\&.
.sp
To Bind CTRL+C CTRL+X (Which means, press CTRL+C then CTRL+X) to quit shynebox
.sp
.if n \{\
.RS 4
.\}
.nf
Control c Control x :Quit
.fi
.if n \{\
.RE
.\}
.SH "KEYMODES"
.sp
A user specified set of key mappings can be activated and de\-activated on\-the\-fly using keymodes\&. Think of keymodes as multiple key binding layers\&. The syntax to define a mapping in a keymode is:
.sp
\fB\fIkeymode\fR\fR\fB: \fR\fB\fImodifiers\fR\fR\fB \fR\fB\fIkey\fR\fR\fB :command [\fR\fB\fIarguments \&...\fR\fR\fB]\fR
.sp
Where \fIkeymode\fR is any alpha\-numeric string name\&.
.sp
When this keymode is activated (see the \fBKeyMode\fR command below), all bindings prefaced by that keymode name become active (and all other keybindings will be deactivated) until the keymode changes again\&.
.SH "COMMANDS"
.PP
Some commands have multiple names which are shown below as
.RS 4
CMD1 | CMD2
.RE
.PP
Related commands have been grouped below as
.RS 4
CMD1 / CMD2
.RE
.PP
The commands are broken up into sections as follows
.RS 4
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Mouse Commands
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Window Commands
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Workspace Commands
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Menu Commands
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Window Manager Commands
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Special Commands
.RE
.RE
.SS "Mouse Commands"
.sp
These commands may only be bound to mouse buttons (plus modifiers), not keystrokes\&. Where mouse motion is used, the action finishes when the mouse button is released\&.
.PP
\fBStartMoving\fR
.RS 4
Start dragging to move the window\&.
.RE
.PP
\fBStartResizing\fR [\fIcorner\fR]
.RS 4
Start dragging to resize the window as if you had grabbed the window at the specified
\fIcorner\fR\&.
.PP
By default \fIcorner\fR is \fBBottomRight\fR, but may be overridden with one of:
.RS 4
\fBNearestCorner NearestEdge NearestCornerOrEdge Center TopLeft Top TopRight Left Right BottomLeft Bottom BottomRight\fR
.RE
.sp
\fBNearestCornerOrEdge\fR
can take multiple arguments to determine corners: [\fIpixel\-size\fR
[\fIpercent\-size\fR]] where
\fIpercent\-size\fR
defaults to 0, and the larger size will choose a corner\&. Or [\fIpercent\-size\fR%]\&.
\fIpercent\-size\fR
is the percentage of half the window width or height\&. Defaults to 50 pixels and 30%\&.
.RE
.PP
\fBStartTabbing\fR
.RS 4
Start dragging to add this window to another\(cqs tabgroup\&.
.RE
.PP
\fBActivateTab\fR
.RS 4
Activates the tab underneath the mouse\&.
.RE
.SS "Window Commands"
.sp
These commands ordinarily affect only the currently focused window\&. The \fBOnWindow\fR modifier and \fBForEach\fR command may affect the window that is used\&.
.PP
\fBMinimize\fR | \fBMinimizeWindow\fR | \fBIconify\fR
.RS 4
Minimize the current window, equivalent to the window button\&.
.RE
.PP
\fBMaximize\fR | \fBMaximizeWindow\fR
.RS 4
Maximize the current window, equivalent to the window button\&.
.RE
.PP
\fBMaximizeHorizontal\fR / \fBMaximizeVertical\fR
.RS 4
Maximize the current window in one direction only, leaving the other dimension unchanged\&.
.RE
.PP
\fBFullscreen\fR
.RS 4
Resize the window\(cqs content to fit the whole screen or monitor, without any window decoration and temporarily put above all layers\&.
.RE
.PP
\fBRaise\fR / \fBLower\fR
.RS 4
Reorder/lower a window to the top or bottom its
\fBcurrent\fR
layer\&. See
\fBshynebox(1)\fR
\fBLAYERS\fR
section\&.
.RE
.PP
\fBRaiseLayer\fR / \fBLowerLayer\fR [\fIoffset\fR]
.RS 4
Raise/lower a window up or down a layer level\&. See
\fBshynebox(1)\fR
\fBLAYERS\fR
section\&.
.RE
.PP
\fBSetLayer\fR \fIlayer\fR
.RS 4
Move the window to the specified layer\&. The
\fIlayer\fR
should be one of
\fBABOVEDOCK\fR,
\fBDOCK\fR,
\fBTOP\fR,
\fBNORMAL\fR,
\fBBOTTOM\fR,
\fBDESKTOP\fR\&. See
\fBshynebox(1)\fR
\fBLAYERS\fR
section\&.
.RE
.PP
\fBClose\fR
.RS 4
Close the current window, equivalent to the window button\&.
.RE
.PP
\fBKill\fR | \fBKillWindow\fR
.RS 4
Close a window that\(cqs not responding to
\fBClose\fR, like using
\fBxkill(1)\fR\&.
.RE
.PP
\fBShade\fR | \fBShadeWindow\fR
.RS 4
Toggle the
\fBshaded\fR
state of the current window, equivalent to the window button\&. A
\fBshaded\fR
window appears as only the title bar\&.
.RE
.PP
\fBShadeOn\fR / \fBShadeOff\fR
.RS 4
Set the
\fBshaded\fR
state of the window to On / Off\&.
.RE
.PP
\fBStick\fR | \fBStickWindow\fR
.RS 4
Toggle the
\fBsticky\fR
state of the current window, equivalent to the window button\&. A
\fBsticky\fR
window is visible on all workspaces\&.
.RE
.PP
\fBSetDecor\fR \fIdecor\fR
.RS 4
Sets which window decorations will be shown\&. The
\fIdecor\fR
has the same format as the \(oq[Deco]\(cq parameter in the apps file\&. See
\fIshynebox\-apps(5)\fR
for more info\&.
.RE
.PP
\fBSetTitleDialog\fR
.RS 4
Opens a dialog to set the name of the current window\&. Title changes are ignored until set to an empty string\&.
.RE
.PP
\fBToggleDecor\fR
.RS 4
Toggles the presence of the window decorations (title bar, window buttons, and resize bar)\&.
.RE
.PP
\fBNextTab\fR / \fBPrevTab\fR
.RS 4
Cycle to the next / previous tab in the current tab group\&.
.RE
.PP
\fBTab\fR \fInumber\fR
.RS 4
Cycle to the given tab in the current tab group, where
\fB1\fR
is the first tab\&. A negative
\fInumber\fR
counts from the end of the tab group (\fB\-1\fR
is the last tab,
\fB\-2\fR
is the next\-to\-last, etc\&.)\&.
.RE
.PP
\fBMoveTabRight\fR / \fBMoveTabLeft\fR
.RS 4
Reorder the tabs in the current tab group, swapping the current tab with the one to the right / left\&.
.RE
.PP
\fBDetachClient\fR
.RS 4
Remove the current tab from the tab group, placing it in its own window\&.
.RE
.PP
\fBResizeTo\fR \fIwidth[%]\fR \fIheight[%]\fR
.RS 4
Resizes the window to the given width and height\&. If the value is given in percent, then the window size will be based on the current
\fBscreen\(cqs\fR
size\&.
.RE
.PP
\fBResize\fR \fIdelta\-width[%]\fR \fIdelta\-height[%]\fR
.RS 4
Resizes the window relative to the current width and height\&. If the value is given in percent, then the window size will be based on the current window\(cqs size\&.
.RE
.PP
\fBResizeHorizontal\fR \fIdelta\-width[%]\fR / \fBResizeVertical\fR \fIdelta\-height[%]\fR
.RS 4
Resizes the window in one dimension only\&. If the value is given in percent, then the window size will be based on the current window\(cqs size\&.
.RE
.PP
\fBMoveTo\fR \fIx[%]\fR \fIy[%]\fR [\fIanchor\fR]
.RS 4
Moves the window to the given coordinates, given in pixels or relatively to the current screen size if % is specified after the value\&.
.sp
If either
\fIx\fR
or
\fIy\fR
is set to
\fB\e\fR*, that coordinate will be ignored, and the movement will only take place in one dimension\&.
.PP
The default \fIanchor\fR is the upper left corner, but may be one of:
.RS 4
\fBTopLeft Left BottomLeft Top Center Bottom TopRight Right BottomRight\fR
.RE
.RE
.PP
\fBMove\fR \fIdelta\-x\fR \fIdelta\-y\fR
.RS 4
Moves the window relative to its current position\&. Positive numbers refer to right and down, and negative to left and up, respectively\&.
.RE
.PP
\fBMoveRight\fR \fId\fR / \fBMoveLeft\fR \fId\fR / \fBMoveUp\fR \fId\fR / \fBMoveDown\fR \fId\fR
.RS 4
Moves the window relative to its current position by the number of pixels specified in
\fId\fR\&. If the number is negative, it moves in the opposite direction\&.
.RE
.PP
\fBTakeToWorkspace\fR \fIworkspace\fR / \fBSendToWorkspace\fR \fIworkspace\fR
.RS 4
Sends the current window to a workspace\&. Take will also take you to that workspace\&. The first workspace is number
\fB1\fR, not 0\&.
.RE
.PP
\fBTakeToNextWorkspace\fR [\fIoffset\fR] / \fBTakeToPrevWorkspace\fR [\fIoffset\fR] / \fBSendToNextWorkspace\fR [\fIoffset\fR] / \fBSendToPrevWorkspace\fR [\fIoffset\fR]
.RS 4
Sends/takes current window/you, to the next or previous workspace\&. If you set
\fIoffset\fR
to a value greater than the default of
\fB1\fR, it will move you that number of workspaces ahead or behind\&. If you go beyond the end of the currently defined workspaces, it will wrap around to the other end automatically\&.
.RE
.PP
\fBSetHead\fR \fInumber\fR
.RS 4
Moves the window to the given display head/monitor\&.
.RE
.PP
\fBSendToNextHead\fR [\fIoffset\fR] / \fBSendToPrevHead\fR [\fIoffset\fR]
.RS 4
Sends the current window to the next/previous display head\&. If you specify an
\fIoffset\fR
greater than
\fB1\fR, it will move the window that many heads\&. If this takes the window beyond the total number of heads, it will wrap around to the beginning\&.
.RE
.PP
\fBSetXProp\fR \fIPROP=value\fR
.RS 4
Sets the xproperty
\fIPROP\fR
of the current window to
\fIvalue\fR\&. Delete the content of
\fIPROP\fR
by using
\fIPROP=\fR\&.
.RE
.SS "Workspace Commands"
.sp
These commands affect the entire workspace (or "desktop" as it is sometimes called)\&.
.PP
\fBAddWorkspace\fR / \fBRemoveLastWorkspace\fR
.RS 4
Adds or removes a workspace from the end of the list of workspaces\&.
.RE
.PP
\fBNextWorkspace\fR [\fIn\fR] / \fBPrevWorkspace\fR [\fIn\fR] / \fBRightWorkspace\fR [\fIn\fR] / \fBLeftWorkspace\fR [\fIn\fR]
.RS 4
Switch to the Next / Previous workspace\&. All versions accept an offset value
\fIn\fR, which defaults to
\fB1\fR
and refers to the number of workspaces to move at one time\&. {Next,Prev}Workspace wrap around when going past the last workspace, whereas {Right,Left}Workspace do not\&. The special offset "0" will toggle the former workspace for Next\- and PrevWorkspace
.RE
.PP
\fBWorkspace\fR \fInumber\fR
.RS 4
Jumps to the given workspace
\fInumber\fR\&. The first workspace is
\fB1\fR\&.
.RE
.PP
\fBNextWindow\fR [{\fIoptions\fR}] [\fIpattern\fR] / \fBPrevWindow\fR [{\fIoptions\fR}] [\fIpattern\fR]
.RS 4
Focuses the next / previous window in the focus list\&.
.PP
\fIoptions\fR is one or more of the following, space delimited:
.RS 4
.PP
\fBstatic\fR
.RS 4
Instead of moving in order of most\-recent focus, move in order of when the window was opened (or, the order shown in the iconbar)\&.
.RE
.PP
\fBgroups\fR
.RS 4
Only include the current tab in windows with multiple tabs\&.
.RE
.sp
If
\fIpattern\fR
arguments are supplied, only windows that match all the patterns are considered \- all others are skipped\&. See the section
\fBCLIENT PATTERNS\fR
below for more information\&.
.sp
This pair of commands has a special side\-effect when the keybinding used has a modifier \- It will temporarily raise the cycled window to the front so you can see it, but if you continue holding down the modifier and press the key again (For example, keep holding "Alt" while you tap the "Tab" key a few times), shynebox will lower the window again when you move on to the next one\&. This allows you to preview the windows in order, but does not change the order in doing so\&.
.RE
.RE
.PP
\fBNextGroup\fR [{\fIoptions\fR}] [\fIpattern\fR] / \fBPrevGroup\fR [{\fIoptions\fR}] [\fIpattern\fR]
.RS 4
Equivalent to NextWindow / PrevWindow above, but with the
\fBgroups\fR
option forced on\&.
.RE
.PP
\fBGotoWindow\fR \fInumber\fR [{\fIoptions\fR}] [\fIpattern\fR]
.RS 4
Focuses and activates the window at position
\fInumber\fR
in the focus list\&. The
\fIoptions\fR
and
\fIpattern\fR
arguments have the same meaning as
\fBNextWindow\fR
above\&.
.RE
.PP
\fBActivate\fR [\fIpattern\fR] | \fBFocus\fR [\fIpattern\fR]
.RS 4
With
\fIpattern\fR, this is an alias for
\fBGoToWindow\fR
1
\fIpattern\fR\&. Without, this behaves like a window command, so that OnWindow events can change the focused window\&.
.RE
.PP
\fBAttach\fR \fIpattern\fR
.RS 4
Combines all windows that match the
\fIpattern\fR
into a single tab group\&.
.RE
.PP
\fBArrangeWindows\fR \fIpattern\fR / \fBArrangeWindowsVertical\fR \fIpattern\fR / \fBArrangeWindowsHorizontal\fR \fIpattern\fR
.RS 4
Tries to tile all windows on the current workspace so that the desktop is not visible\&.
\fBArrangeWindowsVertical\fR
prefers vertical splits (windows side by side), whereas
\fBArrangeWindowsHorizontal\fR
prefers horizontal splits (windows on top of each other)\&.
.sp
When using multi\-monitors, the
\fBacting monitor\fR
is the one the mouse is on\&. See
\fBCLIENT PATTERNS\fR
for more about the
\fIpattern\fR
arguments\&. See
\fBshynebox(1)\fR
for how
\fBstruts\fR
may affect spacing\&.
.RE
.PP
\fBArrangeWindowsStackLeft\fR \fIpattern\fR / \fBArrangeWindowsStackRight\fR \fIpattern\fR / \fBArrangeWindowsStackTop\fR \fIpattern\fR / \fBArrangeWindowsStackBottom\fR \fIpattern\fR
.RS 4
Similar to
\fBArrangeWindows\fR
but will find a "main" window and give it half of the screen/monitor, then stack other windows in a given direction\&. Either the focused or last window will become the "main" window, depending on multi\-monitor setup\&.
.sp
\fBArrangeWindowsStackLeft\fR
puts the main window on the RIGHT hand side of the screen, and stacks the tiled windows are on the LEFT hand side of the screen\&.
.RE
.PP
\fBUnclutter\fR \fIpattern\fR
.RS 4
Re\-place all pattern\-matching windows on the current workspace with current
\fIPlacement Strategy\fR\&. Windows are not resized\&. See
\fBshynebox(1)\fR
for more on
\fIPlacement Strategies\fR\&.
.RE
.PP
\fBShowDesktop\fR
.RS 4
Minimizes all windows on the current workspace\&. If they are already all minimized, then it un\-minimizes all of them\&.
.RE
.PP
\fBToggleToolbarAbove\fR
.RS 4
Toggles the toolbar to the the AboveDock layer\&.
.RE
.PP
\fBToggleToolbarVisible\fR
.RS 4
Toggles the toolbar\(cqs autohiding state (\fBtoolbar\&.autoHide\fR
doesn\(cqt have to be enabled\&. but this is different than
\fBtoolbar\&.visible\fR
in \(oqinit\(cq config)\&.
.RE
.PP
\fBSetWorkspaceNameDialog\fR
.RS 4
Opens a dialog to set the name of the current workspace\&.
.RE
.PP
\fBCloseAllWindows\fR
.RS 4
Closes all windows on all desktops\&.
.RE
.SS "Menu Commands"
.sp
These commands open or close shynebox popup menus\&. For more information on what these menus contain or how to configure them, see \fBshynebox(1)\fR or \fBshynebox\-menu(5)\fR\&.
.PP
\fBRootMenu\fR
.RS 4
Opens the root menu\&.
.RE
.PP
\fBWorkspaceMenu\fR
.RS 4
Opens the workspace menu\&.
.RE
.PP
\fBWindowMenu\fR
.RS 4
Opens a menu containing actions for the current window\&.
.PP
\fBClientMenu\fR [\fIpattern\fR]
.RS 4
Opens a menu that contains all windows matching
\fIpattern\fR\&. Selecting a window will jump to its workspace and raise it\&. See
\fBCLIENT PATTERNS\fR
below for more details on the
\fIpattern\fR
argument\&.
.RE
.PP
\fBCustomMenu\fR \fIpath\fR
.RS 4
Opens a custom menu file\&. This
\fIpath\fR
must be a valid menu file in the same format as detailed by the
\fBROOT MENU\fR
section of
\fBshynebox\-menu(5)\fR\&.
.RE
.PP
\fBHideMenus\fR
.RS 4
Hide all shynebox popup menus\&.
.RE
.RE
.SS "Window Manager Commands"
.sp
These commands affect the Window Manager and possibly all windows\&.
.PP
\fBRestart\fR [\fIpath\fR]
.RS 4
Restarts shynebox\&. This does not close any running applications\&. The optional
\fIpath\fR
is assumed to be an executable window manager, that manager is started in place of shynebox\&.
.RE
.PP
\fBQuit\fR | \fBExit\fR
.RS 4
Exits shynebox\&. This will normally cause X to stop as well and terminate all existing applications, returning you to the login manager or console\&.
.RE
.PP
\fBReconfig\fR | \fBReconfigure\fR
.RS 4
Reloads all shynebox configuration files including the keys file, apps file, style/themes and init file, if they have changed\&.
.RE
.PP
\fBSetStyle\fR \fIpath\fR
.RS 4
Sets the current style to that given in
\fIpath\fR, which must be the full path to a shynebox style\&.
.RE
.PP
\fBReloadStyle\fR
.RS 4
Reloads only the current style\&. Useful after editing a style which is currently in use\&.
.RE
.PP
\fBExecCommand\fR \fIargs \&...\fR | \fBExec\fR \fIargs \&...\fR | \fBExecute\fR \fIargs \&...\fR
.RS 4
You can use this to launch applications, run shell scripts, etc\&. Passes all the arguments to your
\fB$SHELL\fR
(or /bin/sh if $SHELL is not set)\&. Since all arguments are passed verbatim to the shell, you can use environment variables, pipes, or anything else the shell can do\&. Note: processes only see environment variables that were set before shynebox started (such as in
\fB~/\&.shynebox/startup\fR)\&. See
\fBshynebox(1)\fR
for more details on the
\fBENVIRONMENT\fR
and
\fB~/\&.shynebox/startup\fR
file\&.
.RE
.SS "Special Commands"
.sp
These commands have special meanings or behaviors\&.
.PP
\fBMacroCmd\fR {\fIcommand1\fR} {\fIcommand2\fR} {\fIcommand3\fR} \fI\&...\fR
.RS 4
Allows you to execute more than one command with one keybinding\&. The commands will be executed in series\&. The
\fB{\fR
\fB}\fR
brackets are required, as in the following example:
.sp
.if n \{\
.RS 4
.\}
.nf
MacroCmd {MoveTo 0 0} {ResizeTo 1280 800}
.fi
.if n \{\
.RE
.\}
.RE
.PP
\fBDelay\fR {\fIcommand\fR} [\fImilliseconds\fR]
.RS 4
Delays running
\fIcommand\fR
for a given amount of time\&. The time
\fImilliseconds\fR
can also be denoted with
\fIs\fR
or
\fIm\fR
for
\fIseconds\fR
or
\fIminutes\fR
(e\&.g\&. "60s" or "1m")\&. If the same key binding is activated again, the timer will be restarted\&.
.RE
.PP
\fBToggleCmd\fR {\fIcommand1\fR} {\fIcommand2\fR} \fI\&...\fR
.RS 4
Alternates between the commands\&. On the first press of the bound key,
\fIcommand1\fR
runs, then
\fIcommand2\fR
on the next press, so on\&.
.RE
.PP
\fBKeyMode\fR \fIkeymode\fR [\fIreturn\-keybinding\fR]
.RS 4
Activates the named
\fIkeymode\fR
(all key binding lines prefaced with the same
\fIkeymode:\fR) and deactivates all other bindings until the
\fIreturn\-keybinding\fR
(by default
\fBEscape\fR) is pressed\&. The default keymode is named
\fIdefault\fR\&.
.RE
.PP
\fBForEach\fR {\fIcommand\fR} [{\fIcondition\fR}] | \fBMap\fR {\fIcommand\fR} [{\fIcondition\fR}]
.RS 4
Runs the given
\fIcommand\fR
(normally one from the
\fBWindow Commands\fR
section above) on each window\&. If you specify a
\fIcondition\fR
(See
\fBConditions\fR, below) the action will be limited to matching windows\&.
.RE
.PP
\fBIf\fR {\fIcondition\fR} {\fIthen\-command\fR} [{\fIelse\-command\fR}] | \fBCond\fR {\fIcondition\fR} {\fIthen\-command\fR} [{\fIelse\-command\fR}]
.RS 4
If the
\fIcondition\fR
command returns
\fBtrue\fR, the
\fIthen\-command\fR
is ran, otherwise the optional
\fIelse\-command\fR
is ran\&. See
\fBConditions\fR
below for more information on the
\fIcondition\fR
argument\&.
.RE
.SS "Conditions"
.sp
These special commands are used to match windows conditionally\&. They are commonly used by the \fBIf\fR and \fBForEach\fR command\&.
.PP
\fBMatches\fR \fIpattern\fR
.RS 4
Returns
\fBtrue\fR
if the current window matches the given
\fIpattern\fR\&. See
\fBCLIENT PATTERNS\fR
below for details on the
\fIpattern\fR
syntax\&.
.sp
If your key binding uses the
\fBOnWindow\fR
modifier, it matches against the window you clicked, not the currently focused window\&.
.sp
To check other windows besides the currently focused one, see the
\fBEvery\fR
and
\fBSome\fR
conditions below\&.
.RE
.PP
\fBSome\fR \fIcondition\fR
.RS 4
Returns
\fBtrue\fR
if any window on any workspace (not just the currently focused one) matches the
\fIcondition\fR\&.
.RE
.PP
\fBEvery\fR \fIcondition\fR
.RS 4
Returns
\fBtrue\fR
if every window on every workspace (not just the current one) matches the
\fIcondition\fR\&.
.RE
.PP
\fBNot\fR \fIcondition\fR
.RS 4
Returns
\fBtrue\fR
if
\fIcondition\fR
returns
\fBfalse\fR, and vice\-versa\&.
.RE
.PP
\fBAnd\fR {\fIcondition1\fR} {\fIcondition2\fR} [{\fIcondition3\fR} \&...]
.RS 4
Returns
\fBtrue\fR
if and only if all given conditions return
\fBtrue\fR\&.
.RE
.PP
\fBOr\fR {\fIcondition1\fR} {\fIcondition2\fR} [{\fIcondition3\fR} \&...]
.RS 4
Returns
\fBtrue\fR
if any of the listed conditions return
\fBtrue\fR\&.
.RE
.PP
\fBXor\fR {\fIcondition1\fR} {\fIcondition2\fR} [{\fIcondition3\fR} \&...]
.RS 4
Returns the boolean
\fBxor\fR
of the truth values for all conditions listed\&.
.RE
.sp
For examples of \fBForEach\fR, \fBIf\fR, and \fIConditions\fR see @pkgdatadir@/keys the default keys file installed with shynebox\&.
.SH "CLIENT PATTERNS"
.sp
Many of the more advanced commands take a \fIpattern\fR argument, which allows you to direct the action at a specific window or set of windows which match the properties specified in the \fIpattern\fR\&.
.PP
A \fIpattern\fR looks like this
.RS 4
\fB(\fR[\fIpropertyname\fR[!]=]\fIregexp\fR\fB)\fR
\&...
.RE
.sp
Match definitions are enclosed in parentheses \fB(\fR\&...\fB)\fR, and if no \fIpropertyname\fR is given (i\&.e\&. no \fI=\fR is found) then \fBName\fR is assumed\&. The \fIregexp\fR can contain any regular expression, or the special value \fB[current]\fR, which matches the corresponding value of the currently focused window\&. See \fIregex(7)\fR for more information on acceptable regular expressions\&.
.sp
\fIpropertyname\fR is \fBnot\fR case sensitive, whereas the \fIregexp\fR \fBis\fR\&.
.sp
You can use \fB=\fR to test for equality or \fB!=\fR to test for inequality\&.
.sp
If you specify multiple \fB(\fR\fB\fIpattern\fR\fR) arguments, this implies an AND condition \- all patterns must match\&. For example, match on urxvt terminals that are also minimized:
.sp
.if n \{\
.RS 4
.\}
.nf
(name=urxvt) (minimized=yes)
.fi
.if n \{\
.RE
.\}
.PP
The following values are accepted for \fIpropertyname\fR
.RS 4
.PP
\fBName\fR
.RS 4
A string corresponding to the CLASSNAME property (The first field of WM_CLASS from the output of the
\fBxprop(1)\fR
utility)\&.
.RE
.PP
\fBClass\fR
.RS 4
A string corresponding to the CLASSCLASS property (The second field of WM_CLASS from the output of the
\fBxprop(1)\fR
utility)\&.
.RE
.PP
\fBTitle\fR
.RS 4
A string corresponding to the window title (WM_NAME from
\fBxprop(1)\fR)\&.
.RE
.PP
\fBRole\fR
.RS 4
A string, corresponding to the ROLE property (WM_WINDOW_ROLE from
\fBxprop(1)\fR)\&.
.RE
.PP
\fBTransient\fR
.RS 4
Either
\fByes\fR
or
\fBno\fR, depending on whether the window is transient (typically, a popup dialog) or not\&.
.RE
.PP
\fBMaximized\fR
.RS 4
Either
\fByes\fR
or
\fBno\fR, depending on whether the window is maximized or not\&.
.RE
.PP
\fBMaximizedHorizontal\fR
.RS 4
Either
\fByes\fR
or
\fBno\fR, depending on whether the window is maximized horizontally or not\&.
.RE
.PP
\fBMaximizedVertical\fR
.RS 4
Either
\fByes\fR
or
\fBno\fR, depending on whether the window is maximized vertically or not\&.
.RE
.PP
\fBMinimized\fR
.RS 4
Either
\fByes\fR
or
\fBno\fR, depending on whether the window is minimized (iconified) or not\&.
.RE
.PP
\fBFullscreen\fR
.RS 4
Either
\fByes\fR
or
\fBno\fR, depending on whether the window is fullscreen or not\&.
.RE
.PP
\fBShaded\fR
.RS 4
Either
\fByes\fR
or
\fBno\fR, depending on whether the window is shaded or not\&.
.RE
.PP
\fBStuck\fR
.RS 4
Either
\fByes\fR
or
\fBno\fR, depending on whether the window is sticky (on all workspaces) or not\&.
.RE
.PP
\fBFocusHidden\fR
.RS 4
Either
\fByes\fR
or
\fBno\fR, depending on whether the window has asked to be left off the focus list (or, the alt\-tab list), or not\&.
.RE
.PP
\fBIconHidden\fR
.RS 4
Either
\fByes\fR
or
\fBno\fR, depending on whether the window has asked to be left off the icon list (or, the taskbar), or not\&.
.RE
.PP
\fBViewable\fR
.RS 4
Either
\fByes\fR
or
\fBno\fR, depending on whether the window has its view fully obscured or not\&. (minimized counts as obscured)
.RE
.PP
\fBWorkspace\fR
.RS 4
A number corresponding to the workspace number to which the window is attached\&. The first workspace here is
\fB0\fR\&. You may also use
\fB[current]\fR
to match the currently visible workspace\&.
.RE
.PP
\fBWorkspaceName\fR
.RS 4
A string corresponding to the name of the workspace to which the window is attached\&.
.RE
.PP
\fBHead\fR
.RS 4
The number of the display monitor the window is on\&. You may match this against the special value
\fB[mouse]\fR
which refers to the head where the mouse pointer currently resides\&. Heads start at 1 (0 represents all heads, so the focused window is returned)\&.
.RE
.PP
\fBLayer\fR
.RS 4
Case\-sensitive (capitalized) string name of the window\(cqs layer:
\fBABOVEDOCK\fR,
\fBDOCK\fR,
\fBTOP\fR,
\fBNORMAL\fR,
\fBBOTTOM\fR,
\fBDESKTOP\fR
.RE
.RE
.PP
\fB@XPROP\fR
.RS 4
A string, corresponding to any xproperty (Use either the
\fBxprop(1)\fR
utility or the
\fISetXProp\fR
command to set a xproperty to a window)
.RE
.PP
\fBMatches any windows with the CLASSNAME of "xterm"\fR. 
.sp
.if n \{\
.RS 4
.\}
.nf
(xterm)
.fi
.if n \{\
.RE
.\}
.PP
\fBMatches any windows with the same CLASSNAME as the currently focused window\fR. 
.sp
.if n \{\
.RS 4
.\}
.nf
(Name=[current])
.fi
.if n \{\
.RE
.\}
.PP
\fBMatches any windows on the same head as the mouse but on a different layer than\fR. the currently focused window
.sp
.if n \{\
.RS 4
.\}
.nf
(Head=[mouse]) (Layer!=[current])
.fi
.if n \{\
.RE
.\}
.PP
\fBMatches any windows having a xproperty named FOO with "bar" in it\fR. 
.sp
.if n \{\
.RS 4
.\}
.nf
(@FOO=\&.*bar\&.*)
.fi
.if n \{\
.RE
.\}
.sp
.SH "FILES"
.PP
\fB~/\&.shynebox/keys\fR
.RS 4
This is the default location for the keybinding definitions\&.
.RE
.PP
\fB/usr/include/X11/keysymdef\&.h\fR
.RS 4
X key names are in this file\&.
.RE
.SH "CONFIG"
.PP
\fBkeyFile:\fR \fIlocation\fR
.RS 4
This may be set to override the location of the keybinding definitions\&.
.RE
.SH "ENVIRONMENT"
.sp
Remember that \fBExecCommand\fR command can take advantage of other environment variables if they are set before shynebox is started\&. For example, if \fB$TERM\fR is set, it could be use like this:
.sp
.if n \{\
.RS 4
.\}
.nf
Mod1 x :ExecCommand $TERM
.fi
.if n \{\
.RE
.\}
.sp
For more information about environment variables, see your shell\(cqs manual\&.
.SH "EXAMPLES"
.sp
Here are some interesting and/or useful examples you can do with your keys file\&. You can find more in the default keys file @pkgdatadir@/keys\&.
.sp
.if n \{\
.RS 4
.\}
.nf
# Mod4+drag moves a window
OnWindow Mod4 Mouse1 :StartMoving

# If any xterm windows are open, cycle through them\&. If none are open, open one:
Mod4 t :If {Some Matches (xterm)} {NextWindow (xterm)} {Exec xterm}

# Set a different wallpaper on every workspace:
ChangeWorkspace :Exec sbsetbg ~/\&.shynebox/bg$(xprop \-root _NET_CURRENT_DESKTOP | awk \*(Aq{print $3}\*(Aq)\&.png

# Focuses the next window with it\*(Aqs xproperty \*(AqPROP\*(Aq set to \*(Aqfoo\*(Aq
Mod4 p Mod4 Tab :NextWindow (@PROP=foo)
.fi
.if n \{\
.RE
.\}
.SH "AUTHORS"
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
zlice updated for shynebox
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Jim Ramsay <i\&.am at jimramsay com> (>fluxbox\-1\&.0\&.0)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Curt Micol <asenchi at asenchi com> (>fluxbox\-0\&.9\&.11)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Tobias Klausmann <klausman at users sourceforge net> (\(lafluxbox\-0\&.9\&.11)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Grubert <grubert at users sourceforge net> (fluxbox)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Matthew Hawkins <matt at mh dropbear id au> (blackbox)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Wilbert Berendsen <wbsoft at xs4all nl> (blackbox)
.RE
.SH "SEE ALSO"
.sp
shynebox(1) xprop(1) xev(1) xkill(1) regex(7)
.SH "AUTHOR"
.PP
\fBzlice https://github\&.com/zlice/shynebox\fR
.RS 4
Author.
.RE
